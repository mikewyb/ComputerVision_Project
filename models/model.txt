nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> output]
  (1): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> output]
    (1): nn.SpatialConvolutionMM(12 -> 92, 5x5, 1,1, 2,2)
    (2): nn.ReLU
    (3): nn.SpatialBatchNormalization (4D) (92)
    (4): nn.SpatialConvolutionMM(92 -> 384, 3x3, 1,1, 1,1)
    (5): nn.ReLU
    (6): nn.SpatialBatchNormalization (4D) (384)
    (7): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (8): nn.ReLU
    (9): nn.SpatialBatchNormalization (4D) (384)
    (10): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (11): nn.ReLU
    (12): nn.SpatialBatchNormalization (4D) (384)
    (13): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (14): nn.ReLU
    (15): nn.SpatialBatchNormalization (4D) (384)
    (16): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (17): nn.ReLU
    (18): nn.SpatialBatchNormalization (4D) (384)
    (19): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (20): nn.ReLU
    (21): nn.SpatialBatchNormalization (4D) (384)
    (22): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (23): nn.ReLU
    (24): nn.SpatialBatchNormalization (4D) (384)
    (25): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (26): nn.ReLU
    (27): nn.SpatialBatchNormalization (4D) (384)
    (28): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (29): nn.ReLU
    (30): nn.SpatialBatchNormalization (4D) (384)
    (31): nn.SpatialConvolutionMM(384 -> 384, 3x3, 1,1, 1,1)
    (32): nn.ReLU
    (33): nn.SpatialBatchNormalization (4D) (384)
    (34): nn.SpatialConvolutionMM(384 -> 1, 3x3, 1,1, 1,1)
  }
  (2): nn.View(1, 361)
  (3): nn.SplitTable
  (4): nn.ParallelTable {
    input
       `-> (1): nn.Sequential {
             [input -> (1) -> output]
             (1): nn.LogSoftMax
           }
       ... -> output
  }
}